{
  "version": "2.0",
  "template_version": "1.0",
  "created": "2025-01-10T21:05:00Z",
  "description": "Базовый шаблон для создания новых задач в DAP SDK",
  "task_template": {
    "id": "TASK_20250716_235105",
    "title": "Возврат к разработке Python DAP биндингов с новыми правилами",
    "description": "[Detailed description of the task]",
    "category": "ai_development",
    "priority": "MEDIUM",
    "status": "ACTIVE",
    "progress": 0,
    "metadata": {
      "created": "2025-07-16T23:51:05.245605",
      "updated": "2025-07-16T23:51:05.245605",
      "assigned_to": "[developer_name or team]",
      "estimated_duration": "не указано",
      "actual_duration": null,
      "start_date": null,
      "target_completion": "[YYYY-MM-DD]"
    },
    "context": {
      "related_modules": [
        ".context/modules/languages/python/python_development.json",
        ".context/modules/languages/python/knowledge_base/dap_sdk_binding_standards.json", 
        ".context/modules/projects/dap_sdk_project.json",
        ".context/modules/languages/c/c_development.json",
        ".context/modules/core/standards.json"
      ],
      "dependencies": [
        "DAP SDK Core Library",
        "CMake Build System",
        "Python 3.8+ Development Headers",
        "ctypes Library"
      ],
      "files_involved": [
        "CMakeLists.txt",
        "src/python_dap_core.c",
        "src/python_dap_config.c", 
        "include/python_cellframe_common.h",
        "setup.py",
        "plugin/plugin-python/python-dap/"
      ],
      "related_tasks": [
        "Python DAP SDK Integration",
        "C Library Binding Development"
      ]
    },
    "objectives": {
      "primary_goal": "Создать полнофункциональные Python биндинги для DAP SDK с соблюдением стандартов безопасности и производительности",
      "success_criteria": [
        "Успешная компиляция python_cellframe_common библиотеки",
        "Проходящие unit тесты для всех биндинг функций",
        "Корректные вызовы DAP SDK функций из Python",
        "Отсутствие утечек памяти в биндингах",
        "Соответствие стандартам кодирования DAP SDK"
      ],
      "acceptance_criteria": [
        "Все тесты в tests/test_dap_*.py проходят успешно",
        "CMake сборка завершается без ошибок",
        "Python может импортировать и использовать DAP функции",
        "Производительность биндингов соответствует нативным вызовам"
      ]
    },
    "implementation_plan": {
      "phases": [
        {
          "phase": 1,
          "title": "Исправление конфликтов типов функций в заголовочном файле",
          "description": "Привести сигнатуры функций в python_cellframe_common.h в соответствие с реальными DAP SDK функциями",
          "estimated_time": "2-3 часа",
          "deliverables": [
            "Исправленный python_cellframe_common.h с правильными сигнатурами",
            "Соответствие типов dap_config_t*, dap_log_level_t, LOGGER_EXTERNAL_OUTPUT"
          ],
          "status": "ACTIVE",
          "specific_errors": [
            "dap_common_init: conflicting types (void) vs (const char*, const char*)",
            "dap_config_init: conflicting types (void) vs (const char*)", 
            "dap_config_open: conflicting types (void*) vs (dap_config_t*)",
            "dap_log_level_set: conflicting types (int) vs (enum dap_log_level)",
            "exec_with_ret_multistring: conflicting types (const char*) vs (char*)"
          ]
        },
        {
          "phase": 2,
          "title": "Добавление отсутствующих включений заголовочных файлов",
          "description": "Добавить необходимые #include для dap_core_init, dap_core_deinit и других функций",
          "estimated_time": "1-2 часа",
          "deliverables": [
            "Правильные #include директивы в src/python_dap_core.c",
            "Объявления всех используемых функций"
          ],
          "status": "PLANNED",
          "specific_errors": [
            "dap_core_init: call to undeclared function",
            "dap_core_deinit: call to undeclared function"
          ]
        },
        {
          "phase": 3, 
          "title": "Реализация правильных биндинг функций",
          "description": "Переписать функции биндинга с правильными вызовами DAP SDK согласно стандартам",
          "estimated_time": "4-6 часов",
          "deliverables": [
            "Рабочие функции dap_core_init_py(), dap_config_init_py()",
            "Правильная обработка аргументов и возвращаемых значений",
            "Соответствие DAP SDK стандартам кодирования"
          ],
          "status": "PLANNED",
          "requirements": [
            "Использовать DAP_NEW/DAP_DELETE для управления памятью",
            "Добавить префиксы l_, a_, s_, g_ для переменных",
            "Использовать log_it() для логирования ошибок"
          ]
        },
        {
          "phase": 4,
          "title": "Исправление CMake конфигурации",
          "description": "Убедиться что все необходимые библиотеки и пути включены в сборку",
          "estimated_time": "1-2 часа", 
          "deliverables": [
            "Обновленный CMakeLists.txt с правильными зависимостями",
            "Успешная компиляция python_cellframe_common"
          ],
          "status": "PLANNED"
        },
        {
          "phase": 5,
          "title": "Создание и запуск unit тестов",
          "description": "Создать C unit тесты для проверки биндинг функций",
          "estimated_time": "3-4 часа",
          "deliverables": [
            "C unit тесты в tests/c_tests/",
            "Интеграция в CMake CTest framework",
            "100% покрытие основных биндинг функций"
          ],
          "status": "PLANNED"
        },
        {
          "phase": 6,
          "title": "Проверка Python интеграции и исправление импортов",
          "description": "Убедиться что Python может успешно импортировать и использовать модуль",
          "estimated_time": "2-3 часа",
          "deliverables": [
            "Успешный import python_cellframe_common в Python",
            "Проходящие Python тесты из tests/test_dap_*.py", 
            "Работающие вызовы DAP функций из Python"
          ],
          "status": "PLANNED"
        }
      ],
      "milestones": [
        {
          "milestone": "Успешная компиляция биндингов",
          "deadline": "2025-01-17",
          "criteria": "make python_cellframe_common завершается без ошибок"
        },
        {
          "milestone": "Проходящие Python тесты",
          "deadline": "2025-01-18", 
          "criteria": "pytest tests/ проходит без ошибок ModuleNotFoundError"
        }
      ]
    },
    "testing_requirements": {
      "unit_tests": "[Unit testing requirements]",
      "integration_tests": "[Integration testing requirements]",
      "performance_tests": "[Performance testing requirements]",
      "security_tests": "[Security testing requirements]"
    },
    "risks_and_mitigations": [
      {
        "risk": "[Risk description]",
        "probability": "[LOW|MEDIUM|HIGH]",
        "impact": "[LOW|MEDIUM|HIGH]",
        "mitigation": "[Mitigation strategy]"
      }
    ],
    "progress_tracking": {
      "completed_phases": [],
      "current_phase": null,
      "blockers": [],
      "achievements": [],
      "lessons_learned": []
    },
    "performance_metrics": {
      "baseline": {
        "metric1": "[baseline value]",
        "metric2": "[baseline value]"
      },
      "targets": {
        "metric1": "[target value]",
        "metric2": "[target value]"
      },
      "actual": {
        "metric1": null,
        "metric2": null
      }
    },
    "documentation": {
      "design_documents": [],
      "technical_specifications": [],
      "user_documentation": [],
      "api_documentation": []
    }
  },
  "category_specific_templates": {
    "crypto_development": {
      "additional_fields": {
        "algorithm_type": "[post-quantum|classical|hybrid]",
        "security_level": "[security level in bits]",
        "compliance_standards": [
          "[standard1]",
          "[standard2]"
        ],
        "reference_implementation": "[URL or description]"
      }
    },
    "performance_optimization": {
      "additional_fields": {
        "optimization_type": "[algorithmic|system|compiler|platform]",
        "target_improvement": "[percentage or absolute value]",
        "profiling_tools": [
          "[tool1]",
          "[tool2]"
        ],
        "benchmark_environment": "[environment description]"
      }
    },
    "infrastructure": {
      "additional_fields": {
        "infrastructure_type": "[build_system|ci_cd|deployment|monitoring]",
        "affected_components": [
          "[component1]",
          "[component2]"
        ],
        "rollback_plan": "[rollback strategy]"
      }
    }
  },
  "usage_instructions": {
    "creating_new_task": [
      "1. Copy this template to context/tasks/active.json",
      "2. Replace all placeholder values with actual task data",
      "3. Update the task_template to task_data in the structure",
      "4. Fill in category-specific fields if applicable",
      "5. Set appropriate priority and estimated timeline",
      "6. Define clear success and acceptance criteria"
    ],
    "updating_task": [
      "1. Update progress percentage regularly",
      "2. Move completed phases to completed_phases array",
      "3. Update current_phase to reflect current work",
      "4. Document blockers and achievements",
      "5. Update actual performance metrics as work progresses"
    ],
    "completing_task": [
      "1. Ensure all phases are marked as completed",
      "2. Fill in final performance metrics",
      "3. Document lessons learned",
      "4. Move task to context/tasks/history.json",
      "5. Create new active task if needed"
    ]
  },
  "navigation_system": {
    "purpose": "Задача: Возврат к разработке Python DAP биндингов с новыми правилами",
    "recovery_path": ".context/manifest.json",
    "current_file": ".context/tasks/возврат_к_разработке_python_dap_биндинго_20250716_235105.json",
    "file_role": "TASK_DEFINITION",
    "related_files": [
      ".context/manifest.json"
    ],
    "quick_navigation": {
      "🏠 Главная": ".context/manifest.json - главный навигатор системы",
      "📋 Задачи": ".context/tasks/ - управление задачами",
      "🛠️ CLI": ".context/tools/scripts/slc_cli.py - автоматизация"
    },
    "usage_hint": "./slc list для просмотра всех задач проекта",
    "ai_context": "Активная задача СЛК: Возврат к разработке Python DAP биндингов с новыми правилами"
  }
}