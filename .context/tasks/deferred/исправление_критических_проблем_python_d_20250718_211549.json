{
  "version": "2.0",
  "template_version": "1.0",
  "created": "2025-01-10T21:05:00Z",
  "description": "Базовый шаблон для создания новых задач в DAP SDK",
  "task_template": {
    "id": "TASK_20250718_211549",
    "title": "исправление_критических_проблем_python_dap",
    "description": "Исправление критических проблем Python-DAP биндингов и DAP SDK модулей выявленных при тестировании. Задача фокусируется только на Python-DAP компонентах без зависимости от CellFrame Node.",
    "category": "refactoring",
    "priority": "CRITICAL",
    "status": "ACTIVE",
    "progress": 0,
    "metadata": {
      "created": "2025-07-18T21:15:49.591153",
      "updated": "2025-07-18T21:15:49.591153",
      "assigned_to": "Python-DAP Development Team",
      "estimated_duration": "3-4 недели",
      "actual_duration": null,
      "start_date": "2025-07-18",
      "target_completion": "2025-08-15"
    },
            "context": {
          "context_loading_policy": {
            "auto_load": [
              "projects/dap_sdk_project.json",
              "languages/python/python_development.json", 
              "languages/python/knowledge_base/dap_sdk_binding_standards.json",
              "core/development_standards.json",
              "core/standards.json"
            ]
          },
          "related_modules": [
            "plugins/plugin-python/python-dap/",
            "plugins/plugin-python/python-dap/dap/",
            "plugins/plugin-python/python-dap/src/",
            "plugins/plugin-python/tests/"
          ],
      "dependencies": [
        "DAP SDK C library",
        "Python C extension API",
        "pytest testing framework",
        "CMake build system"
      ],
      "files_involved": [
        "plugins/plugin-python/python-dap/dap/events/events.py",
        "plugins/plugin-python/python-dap/dap/crypto/",
        "plugins/plugin-python/python-dap/dap/core/dap.py",
        "plugins/plugin-python/python-dap/setup.py",
        "plugins/plugin-python/python-dap/CMakeLists.txt"
      ],
      "related_tasks": [
        "работа_с_нодой_целлфрейм_и_плагинами_питон"
      ]
    },
    "objectives": {
      "primary_goal": "Восстановить функциональность Python-DAP биндингов и добиться успешного прохождения всех unit и integration тестов",
      "success_criteria": [
        "95%+ unit тестов проходят успешно",
        "Покрытие кода не менее 75%",
        "Все критические API доступны и работают",
        "События DAP SDK полностью функциональны",
        "Криптографические модули полностью реализованы"
      ],
      "acceptance_criteria": [
        "Нет критических ошибок импорта модулей",
        "Система событий полностью работоспособна", 
        "Все основные классы DAP SDK доступны через Python",
        "Тесты запускаются без фатальных ошибок",
        "Документированы все изменения в API"
      ]
    },
    "implementation_plan": {
      "phases": [
        {
          "phase": 1,
          "title": "Восстановление нативных биндингов",
          "description": "Исправление критических проблем с импортом нативных функций и восстановление системы событий",
          "estimated_time": "5-7 дней",
          "deliverables": [
            "Исправлен python_dap.so с полным набором функций",
            "dap_events_init и связанные функции доступны",
            "Система событий полностью функциональна",
            "Базовые импорты работают без ошибок"
          ],
          "status": "PLANNED",
          "tasks": [
            "Проанализировать отсутствующие символы в python_dap.so",
            "Добавить недостающие биндинги для событий",
            "Исправить сигнатуру dap_config_init() с правильными параметрами",
            "Протестировать базовые импорты dap модулей"
          ]
        },
        {
          "phase": 2,
          "title": "Восстановление криптографических модулей",
          "description": "Создание отсутствующих модулей и исправление API криптографических функций",
          "estimated_time": "4-5 дней",
          "deliverables": [
            "Модуль dap.crypto.enc полностью реализован",
            "Классы DapHashAlgorithm и DapSignType доступны",
            "Все криптографические методы работают",
            "Unit тесты криптографии проходят"
          ],
          "status": "PLANNED",
          "tasks": [
            "Создать модуль dap/crypto/enc.py с классом DapEnc",
            "Добавить DapHashAlgorithm в dap/crypto/hash.py",
            "Добавить DapSignType в dap/crypto/sign.py",
            "Реализовать недостающие методы в криптографических классах",
            "Исправить конструкторы с обязательными параметрами"
          ]
        },
        {
          "phase": 3,
          "title": "Исправление Core API и методов",
          "description": "Добавление недостающих методов в основные классы и исправление их поведения",
          "estimated_time": "3-4 дня",
          "deliverables": [
            "Все методы DapLogging, DapTime, DapSystem реализованы",
            "Исправлены проблемы с инициализацией DAP Core",
            "Корректные сигнатуры всех публичных методов",
            "Unit тесты core модулей проходят"
          ],
          "status": "PLANNED",
          "tasks": [
            "Добавить методы debug, info, error в DapLogging",
            "Реализовать now, to_str_rfc822 в DapTime", 
            "Добавить exec_with_ret_multistring в DapSystem",
            "Исправить инициализацию dap_config_init с параметрами",
            "Добавить недостающие свойства handle в ключевые классы"
          ]
        },
        {
          "phase": 4,
          "title": "Исправление API интерфейсов и совместимости",
          "description": "Обновление устаревших интерфейсов и исправление проблем совместимости",
          "estimated_time": "3-4 дня",
          "deliverables": [
            "Все базовые процессоры правильно реализованы",
            "Legacy интерфейсы обновлены",
            "API соответствует ожиданиям тестов",
            "Integration тесты проходят без ошибок"
          ],
          "status": "PLANNED",
          "tasks": [
            "Добавить _validate_network в BaseConditionalProcessor",
            "Исправить create_transfer в DapTransaction",
            "Обновить конструкторы классов с правильными параметрами",
            "Исправить инициализацию TxComposer",
            "Убрать зависимости от CellFrame в DAP-only тестах"
          ]
        },
        {
          "phase": 5,
          "title": "Оптимизация тестов и финальная валидация",
          "description": "Исправление конфигурации тестов и обеспечение стабильного прохождения",
          "estimated_time": "2-3 дня",
          "deliverables": [
            "Все Python-DAP тесты проходят стабильно",
            "Покрытие кода достигает целевого уровня",
            "Конфигурация тестирования оптимизирована",
            "Документация обновлена"
          ],
          "status": "PLANNED", 
          "tasks": [
            "Исправить пути в конфигурации тестов",
            "Обновить маркеры pytest для DAP-only тестов",
            "Оптимизировать покрытие кода",
            "Создать документацию по изменениям",
            "Провести полное регрессионное тестирование"
          ]
        }
      ],
      "milestones": [
        {
          "milestone": "Восстановление базовой функциональности",
          "deadline": "2025-07-25",
          "criteria": "Основные импорты работают, система событий функциональна"
        },
        {
          "milestone": "Полнота криптографического API",
          "deadline": "2025-08-01",
          "criteria": "Все криптографические модули и методы доступны"
        },
        {
          "milestone": "Стабильность Core API",
          "deadline": "2025-08-08",
          "criteria": "Core модули полностью функциональны, основные тесты проходят"
        },
        {
          "milestone": "Готовность к продакшену",
          "deadline": "2025-08-15",
          "criteria": "95%+ тестов проходят, покрытие 75%+, документация готова"
        }
      ]
    },
    "testing_requirements": {
      "unit_tests": "Все unit тесты должны проходить с покрытием не менее 75%. Особое внимание к crypto, core, events модулям",
      "integration_tests": "Integration тесты только для DAP SDK компонентов без зависимости от CellFrame Node",
      "performance_tests": "Базовые performance тесты для критических операций (подпись, хеширование, сериализация)",
      "security_tests": "Валидация криптографических операций и безопасности API"
    },
    "risks_and_mitigations": [
      {
        "risk": "Сложность восстановления нативных биндингов",
        "probability": "HIGH",
        "impact": "HIGH", 
        "mitigation": "Поэтапный подход, начать с минимально работающего набора функций, постепенно расширять"
      },
      {
        "risk": "Ломающие изменения в API при исправлениях",
        "probability": "MEDIUM",
        "impact": "HIGH",
        "mitigation": "Строгое версионирование, backward compatibility где возможно, детальная документация изменений"
      },
      {
        "risk": "Зависимости между модулями затрудняют изолированное тестирование",
        "probability": "MEDIUM", 
        "impact": "MEDIUM",
        "mitigation": "Использование mock объектов, создание тестовых заглушек для внешних зависимостей"
      },
      {
        "risk": "Неполное понимание требований DAP SDK",
        "probability": "LOW",
        "impact": "HIGH",
        "mitigation": "Тщательное изучение исходного кода DAP SDK, консультации с основными разработчиками"
      }
    ],
    "progress_tracking": {
      "completed_phases": [],
      "current_phase": {
        "phase": 1,
        "title": "Восстановление нативных биндингов",
        "started": "2025-07-18T21:15:49.591153",
        "progress": 0
      },
      "blockers": [
        "Необходимо детальное понимание отсутствующих символов в python_dap.so",
        "Требуется доступ к исходному коду DAP SDK для правильной реализации биндингов"
      ],
      "achievements": [
        "Проведено полное тестирование и выявлены все критические проблемы",
        "Переорганизованы тесты - CellFrame Node тесты вынесены отдельно",
        "Создан автоматизированный test runner с виртуальным окружением",
        "Составлен детальный план восстановления функциональности"
      ],
      "lessons_learned": []
    },
    "performance_metrics": {
      "baseline": {
        "test_success_rate": "55% (76/138 тестов)",
        "code_coverage": "0%",
        "critical_errors": "2 (события и криптография)",
        "api_completeness": "70%"
      },
      "targets": {
        "test_success_rate": "95%+ (131+/138 тестов)",
        "code_coverage": "75%+",
        "critical_errors": "0",
        "api_completeness": "95%+"
      },
      "actual": {
        "test_success_rate": null,
        "code_coverage": null,
        "critical_errors": null,
        "api_completeness": null
      }
    },
    "documentation": {
      "design_documents": [
        "Архитектура Python-DAP биндингов",
        "Схема интеграции с DAP SDK"
      ],
      "technical_specifications": [
        "Спецификация Python API для DAP SDK",
        "Требования к нативным биндингам"
      ],
      "user_documentation": [
        "Руководство по использованию Python-DAP",
        "Примеры использования API"
      ],
      "api_documentation": [
        "Полная документация Python-DAP API",
        "Справочник по изменениям и миграции"
      ]
    }
  },
  "category_specific_templates": {
    "crypto_development": {
      "additional_fields": {
        "algorithm_type": "[post-quantum|classical|hybrid]",
        "security_level": "[security level in bits]",
        "compliance_standards": [
          "[standard1]",
          "[standard2]"
        ],
        "reference_implementation": "[URL or description]"
      }
    },
    "performance_optimization": {
      "additional_fields": {
        "optimization_type": "[algorithmic|system|compiler|platform]",
        "target_improvement": "[percentage or absolute value]",
        "profiling_tools": [
          "[tool1]",
          "[tool2]"
        ],
        "benchmark_environment": "[environment description]"
      }
    },
    "infrastructure": {
      "additional_fields": {
        "infrastructure_type": "[build_system|ci_cd|deployment|monitoring]",
        "affected_components": [
          "[component1]",
          "[component2]"
        ],
        "rollback_plan": "[rollback strategy]"
      }
    }
  },
  "usage_instructions": {
    "creating_new_task": [
      "1. Copy this template to context/tasks/active.json",
      "2. Replace all placeholder values with actual task data",
      "3. Update the task_template to task_data in the structure",
      "4. Fill in category-specific fields if applicable",
      "5. Set appropriate priority and estimated timeline",
      "6. Define clear success and acceptance criteria"
    ],
    "updating_task": [
      "1. Update progress percentage regularly",
      "2. Move completed phases to completed_phases array",
      "3. Update current_phase to reflect current work",
      "4. Document blockers and achievements",
      "5. Update actual performance metrics as work progresses"
    ],
    "completing_task": [
      "1. Ensure all phases are marked as completed",
      "2. Fill in final performance metrics",
      "3. Document lessons learned",
      "4. Move task to context/tasks/history.json",
      "5. Create new active task if needed"
    ]
  },
  "navigation_system": {
    "purpose": "Задача: исправление_критических_проблем_python_dap",
    "recovery_path": ".context/manifest.json",
    "current_file": ".context/tasks/исправление_критических_проблем_python_d_20250718_211549.json",
    "file_role": "TASK_DEFINITION",
    "related_files": [
      ".context/manifest.json"
    ],
    "quick_navigation": {
      "🏠 Главная": ".context/manifest.json - главный навигатор системы",
      "📋 Задачи": ".context/tasks/ - управление задачами",
      "🛠️ CLI": ".context/tools/scripts/slc_cli.py - автоматизация"
    },
    "usage_hint": "./slc list для просмотра всех задач проекта",
    "ai_context": "Активная задача СЛК: исправление_критических_проблем_python_dap"
  }
}