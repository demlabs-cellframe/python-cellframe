{
  "version": "2.0",
  "template_version": "1.0",
  "created": "2025-01-10T21:05:00Z",
  "description": "Базовый шаблон для создания новых задач в DAP SDK",
  "task_template": {
    "id": "TASK_20250718_204754",
    "title": "работа_с_нодой_целлфрейм_и_плагинами_питон",
    "description": "Работа с нодой Cellframe и разработка Python плагинов для DAP SDK. Включает в себя настройку окружения, изучение архитектуры, создание биндингов и разработку плагинов.",
    "category": "cellframe_development",
    "priority": "HIGH",
    "status": "ACTIVE",
    "progress": 0,
    "metadata": {
      "created": "2025-07-18T20:47:54.062773",
      "updated": "2025-07-18T20:47:54.062773",
      "assigned_to": "AI Assistant",
      "estimated_duration": "2-4 недели",
      "actual_duration": null,
      "start_date": "2025-07-18",
      "target_completion": "2025-08-15"
    },
              "context": {
            "context_loading_policy": {
              "auto_load": [
                "projects/dap_sdk_project.json",
                "projects/dap_sdk/python_bindings_coding_standards.json",
                "languages/python/python_development.json",
                "core/development_standards.json",
                "core/standards.json"
              ],
              "on_demand": [
                "methodologies/performance_optimization.json",
                "tools/comprehensive_validation_suite.json",
                "standards/dap_sdk_coding_standards.json"
              ]
            },
            "related_modules": [
              "projects/dap_sdk_project.json",
              "projects/dap_sdk/python_bindings_coding_standards.json", 
              "languages/python/python_development.json",
              "core/development_standards.json",
              "core/standards.json",
              "methodologies/performance_optimization.json",
              "tools/comprehensive_validation_suite.json",
              "standards/dap_sdk_coding_standards.json"
            ],
      "dependencies": [
        "Python 3.8+",
        "DAP SDK",
        "Cellframe Node",
        "CMake build system",
        "C compiler (GCC/Clang)"
      ],
      "files_involved": [
        ".context/manifest.json",
        ".context/modules/core/project.json",
        "plugins/plugin-python/",
        "python-cellframe/",
        "python-dap/",
        "cellframe-sdk/"
      ],
                  "related_tasks": [
              "исправление_системы_сборки_dap_sdk_цикли_20250718_195159"
            ]
          },
          "project_files": {
            "projects/dap_sdk_project.json": {
              "description": "Специализированный проект DAP SDK с пост-квантовой криптографией",
              "auto_load": true,
              "category": "project_template"
            },
            "projects/dap_sdk/python_bindings_coding_standards.json": {
              "description": "Стандарты для Python биндингов DAP SDK",
              "auto_load": true,
              "category": "development_standards"
            },
            "languages/python/python_development.json": {
              "description": "Шаблон Python разработки",
              "auto_load": true,
              "category": "language_template"
            },
            "core/development_standards.json": {
              "description": "Общие стандарты разработки",
              "auto_load": true,
              "category": "development_standards"
            },
            "core/standards.json": {
              "description": "Стандарты кода и разработки",
              "auto_load": true,
              "category": "core_standards"
            },
            "methodologies/performance_optimization.json": {
              "description": "Методологии оптимизации производительности",
              "auto_load": false,
              "category": "methodology"
            },
            "tools/comprehensive_validation_suite.json": {
              "description": "Инструменты комплексной валидации",
              "auto_load": false,
              "category": "validation_tools"
            },
            "standards/dap_sdk_coding_standards.json": {
              "description": "Специфичные стандарты кодирования DAP SDK",
              "auto_load": false,
              "category": "coding_standards"
            }
          },
    "objectives": {
      "primary_goal": "Настроить полноценное окружение для разработки Python плагинов для Cellframe ноды с использованием DAP SDK",
      "success_criteria": [
        "Успешная сборка DAP SDK с Python биндингами",
        "Работающие примеры Python плагинов",
        "Документированная архитектура и API",
        "Настроенная система тестирования",
        "Интеграция с системой сборки проекта"
      ],
      "acceptance_criteria": [
        "Можно создать новый Python плагин с нуля",
        "Плагин корректно загружается в Cellframe ноду",
        "API DAP SDK доступно из Python кода",
        "Проходят все unit и integration тесты",
        "Есть полная документация по разработке плагинов"
      ]
    },
              "implementation_plan": {
            "phases": [
              {
                "phase": 1,
                "title": "Анализ архитектуры и настройка окружения",
                "description": "Изучение структуры проекта Cellframe, DAP SDK и Python плагинов. Настройка среды разработки.",
                "estimated_time": "3-4 дня",
                "deliverables": [
                  "Документация архитектуры проекта",
                  "Настроенная среда разработки",
                  "Работающая сборка базового проекта"
                ],
                "status": "IN_PROGRESS"
              },
              {
                "phase": 2,
                "title": "Изучение Python биндингов DAP SDK",
                "description": "Анализ существующих Python биндингов, понимание API и механизмов интеграции с C кодом.",
                "estimated_time": "4-5 дней",
                "deliverables": [
                  "Документация по Python API DAP SDK",
                  "Примеры использования основных функций",
                  "Тестовые скрипты для проверки функциональности"
                ],
                "status": "PLANNED"
              },
              {
                "phase": 3,
                "title": "Разработка примера Python плагина",
                "description": "Создание полнофункционального примера плагина с использованием всех основных возможностей.",
                "estimated_time": "5-7 дней",
                "deliverables": [
                  "Рабочий пример Python плагина",
                  "Система автоматической загрузки плагинов",
                  "Unit тесты для плагина"
                ],
                "status": "PLANNED"
              },
              {
                "phase": 4,
                "title": "Интеграция и документация",
                "description": "Интеграция в основную систему сборки, создание полной документации для разработчиков.",
                "estimated_time": "2-3 дня",
                "deliverables": [
                  "Интеграция в CMake систему сборки",
                  "Полная документация для разработчиков",
                  "Руководство по созданию новых плагинов"
                ],
                "status": "PLANNED"
              }
            ],
            "milestones": [
              {
                "milestone": "Рабочая среда разработки",
                "deadline": "2025-07-22",
                "criteria": "Можно собрать и запустить Cellframe ноду с Python поддержкой"
              },
              {
                "milestone": "Понимание архитектуры",
                "deadline": "2025-07-27",
                "criteria": "Документирована архитектура и API Python биндингов"
              },
              {
                "milestone": "Рабочий плагин",
                "deadline": "2025-08-05",
                "criteria": "Создан и протестирован пример Python плагина"
              },
              {
                "milestone": "Полная интеграция",
                "deadline": "2025-08-15",
                "criteria": "Вся функциональность интегрирована и задокументирована"
              }
            ]
          },
    "testing_requirements": {
      "unit_tests": "[Unit testing requirements]",
      "integration_tests": "[Integration testing requirements]",
      "performance_tests": "[Performance testing requirements]",
      "security_tests": "[Security testing requirements]"
    },
    "risks_and_mitigations": [
      {
        "risk": "[Risk description]",
        "probability": "[LOW|MEDIUM|HIGH]",
        "impact": "[LOW|MEDIUM|HIGH]",
        "mitigation": "[Mitigation strategy]"
      }
    ],
              "progress_tracking": {
            "completed_phases": [],
            "current_phase": {
              "phase": 1,
              "title": "Анализ архитектуры и настройка окружения",
              "started": "2025-07-18T20:47:54.062773",
              "progress": 0
            },
            "blockers": [],
            "achievements": [
              "Создана детализированная задача с планом выполнения",
              "Определены все необходимые модули и зависимости",
              "Настроена СЛК система для работы с задачей"
            ],
            "lessons_learned": []
          },
    "performance_metrics": {
      "baseline": {
        "metric1": "[baseline value]",
        "metric2": "[baseline value]"
      },
      "targets": {
        "metric1": "[target value]",
        "metric2": "[target value]"
      },
      "actual": {
        "metric1": null,
        "metric2": null
      }
    },
    "documentation": {
      "design_documents": [],
      "technical_specifications": [],
      "user_documentation": [],
      "api_documentation": []
    }
  },
  "category_specific_templates": {
    "crypto_development": {
      "additional_fields": {
        "algorithm_type": "[post-quantum|classical|hybrid]",
        "security_level": "[security level in bits]",
        "compliance_standards": [
          "[standard1]",
          "[standard2]"
        ],
        "reference_implementation": "[URL or description]"
      }
    },
    "performance_optimization": {
      "additional_fields": {
        "optimization_type": "[algorithmic|system|compiler|platform]",
        "target_improvement": "[percentage or absolute value]",
        "profiling_tools": [
          "[tool1]",
          "[tool2]"
        ],
        "benchmark_environment": "[environment description]"
      }
    },
    "infrastructure": {
      "additional_fields": {
        "infrastructure_type": "[build_system|ci_cd|deployment|monitoring]",
        "affected_components": [
          "[component1]",
          "[component2]"
        ],
        "rollback_plan": "[rollback strategy]"
      }
    }
  },
  "usage_instructions": {
    "creating_new_task": [
      "1. Copy this template to context/tasks/active.json",
      "2. Replace all placeholder values with actual task data",
      "3. Update the task_template to task_data in the structure",
      "4. Fill in category-specific fields if applicable",
      "5. Set appropriate priority and estimated timeline",
      "6. Define clear success and acceptance criteria"
    ],
    "updating_task": [
      "1. Update progress percentage regularly",
      "2. Move completed phases to completed_phases array",
      "3. Update current_phase to reflect current work",
      "4. Document blockers and achievements",
      "5. Update actual performance metrics as work progresses"
    ],
    "completing_task": [
      "1. Ensure all phases are marked as completed",
      "2. Fill in final performance metrics",
      "3. Document lessons learned",
      "4. Move task to context/tasks/history.json",
      "5. Create new active task if needed"
    ]
  },
  "navigation_system": {
    "purpose": "Задача: работа_с_нодой_целлфрейм_и_плагинами_питон",
    "recovery_path": ".context/manifest.json",
    "current_file": ".context/tasks/работа_с_нодой_целлфрейм_и_плагинами_пит_20250718_204754.json",
    "file_role": "TASK_DEFINITION",
    "related_files": [
      ".context/manifest.json"
    ],
    "quick_navigation": {
      "🏠 Главная": ".context/manifest.json - главный навигатор системы",
      "📋 Задачи": ".context/tasks/ - управление задачами",
      "🛠️ CLI": ".context/tools/scripts/slc_cli.py - автоматизация"
    },
    "usage_hint": "./slc list для просмотра всех задач проекта",
    "ai_context": "Активная задача СЛК: работа_с_нодой_целлфрейм_и_плагинами_питон"
  }
}