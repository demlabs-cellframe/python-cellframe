{
  "task_info": {
    "title": "Аудит и рефакторинг Python биндингов DAP/Cellframe",
    "created": "2025-08-12T00:00:00Z",
    "priority": "high",
    "owner": "bindings-team",
    "area": ["python-dap", "CellFrame", "build/cpack"],
    "notes": "Синхронизировано с СЛК. Исправлять поэтапно, без регрессий."
  },
  "todos": [
    {
      "id": "cfg_remove_opt_dap_default",
      "title": "Избавиться от жестких путей /opt/dap и добавить явную инициализацию",
      "status": "todo",
      "files": [
        "python-dap/src/python_dap.c",
        "python-dap/include/python_dap.h",
        "python-dap/src/python_dap_config.c"
      ],
      "actions": [
        "Ввести API python: dap_sdk_init_with_params(app, work_dir, etc_dir, tmp_dir, log_file, threads, debug)",
        "По умолчанию инициализацию НЕ выполнять при импорте; требовать явного вызова",
        "Поддержать ENV-переменные и paths из тестового окружения"
      ]
    },
    {
      "id": "logging_reduce_debug_noise",
      "title": "Спрятать шумные DEBUG printf/fprintf под макрос и единый логгер",
      "status": "todo",
      "files": ["python-dap/src/python_dap.c"],
      "actions": [
        "Заменить прямые printf на макрос DEBUG_LOG, отключаемый в Release",
        "Для сообщений об ошибках использовать PySys_WriteStderr или DAP_LOG"
      ]
    },
    {
      "id": "imports_consistency_python_dap",
      "title": "Единообразный импорт python_dap (исключить 'from dap.python_dap import *')",
      "status": "todo",
      "files": ["python-dap/python_dap.py", "CellFrame/**"],
      "actions": [
        "Оставить только относительный импорт в обертке и убрать ветки, ведущие к конфликтам",
        "Просканировать и заменить прямые импорты 'from dap.python_dap import *'"
      ]
    },
    {
      "id": "cellframe_stub_pass_cleanup",
      "title": "Убрать заглушки pass/NotImplemented в CellFrame/* или пометить как явно не поддерживается",
      "status": "todo",
      "files": ["CellFrame/**"],
      "actions": [
        "Где возможно — минимальная реализация поверх python_dap",
        "Где невозможно — поднять осмысленные исключения с ссылкой на issue",
        "Добавить unit-тесты на эти места"
      ]
    },
    {
      "id": "py_methoddef_duplicates_guard",
      "title": "Защита от дублирования имен методов в PyMethodDef",
      "status": "todo",
      "files": ["python-dap/src/python_dap.c"],
      "actions": [
        "При конкатенации таблиц методов проверять уникальность ml_name",
        "Логировать и фейлить сборку при конфликте"
      ]
    },
    {
      "id": "naming_consistency_methods_arrays",
      "title": "Привести к одному стилю имен массивов методов (snake_case *_methods)",
      "status": "todo",
      "files": [
        "python-dap/src/python_dap_network.c",
        "python-dap/src/python_dap_http.c",
        "python-dap/src/python_dap_system.c",
        "python-dap/src/python_dap_stream.c",
        "python-dap/src/python_dap_crypto.c"
      ],
      "actions": [
        "Переименовать DapNetworkMethods → network_methods и т.п.",
        "Обновить декларации в заголовках"
      ]
    },
    {
      "id": "cpack_packages_for_sdks",
      "title": "CPack: генерировать пакеты для DAP SDK и Cellframe SDK и устанавливать в venv",
      "status": "todo",
      "files": ["CMakeLists.txt", "cmake/**"],
      "actions": [
        "Добавить цели package для dap-sdk и cellframe-sdk",
        "Скрипт распаковки в venv_test с правильными RPATH/SONAME"
      ]
    },
    {
      "id": "tests_init_params_fixture",
      "title": "Добавить pytest фикстуру для явной инициализации dap sdk с temp директориями",
      "status": "todo",
      "files": ["tests/fixtures/conftest.py"],
      "actions": [
        "Фикстура вызывает dap_sdk_init_with_params с tmp-путями",
        "Инициализация один раз на сессию, корректная деинициализация"
      ]
    }
  ]
}

