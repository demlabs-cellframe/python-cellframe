from typing import Protocol
from DAP.Crypto import GUUID
from DAP.Network import ClusterRole
from DAP.Network import StreamNodeAddr
from DAP.Network import Member

class DB(Protocol):
    @staticmethod
    def get(key : str, group : str) -> bytes: ...
    @staticmethod
    def set(key : str, group : str, value : bytes) -> bool: ...
    @staticmethod
    def set(key : str, group : str, value : bytes, isPinned : bool) -> bool: ...
    @staticmethod
    def set_sync(key : str, group : str, value : bytes) -> bool: ...
    @staticmethod
    def set_sync(key : str, group : str, value : bytes, isPinned : bool) -> bool: ...
    @staticmethod
    def delete(key : str, group : str) -> bool: ...
    @staticmethod
    def pin(key : str, group : str) -> bool: ...
    @staticmethod
    def unpin(key : str, group : str) -> bool: ...
    @staticmethod
    def grLoad(group : str) -> list: ...
    pass

class Container(Protocol):
    @property
    def key(self) -> str: ...
    @property
    def value(self) -> bytes: ...
    pass

class Instance(Protocol):
    def __init__(self) -> None: ...
    pass

class Cluster(Protocol):
    def __init__(self, dbi : Instance, groupNmae : str) -> None: ...
    def __init__(self, dbi : Instance, memberName : str, GUUID : GUUID, groupMask : str, ttl : int, ownerRootAccess : bool, 
                 defaultRole : MemberRole, linksClusterRole : ClusterRole) -> None: ...
    def memberAdd(self, address : StreamNodeAddr, role : MemberRole) -> Member: ...
    def memberDelete(self, address : StreamNodeAddr) -> bool: ...
    def notifyAdd(self, func, callback_args) -> None: ...
    @staticmethod
    def byGroup(instance: Instance, groupName : str) -> Cluster:
        pass
    pass

class MemberRole(Protocol):
    def __eq__(self, value: MemberRole) -> bool: ...
    def __ne__(self, value: MemberRole) -> bool: ...
    pass

class MemberRoles(Protocol):
    @property
    def NOBODY(self) -> MemberRole: ...
    @property
    def GUEST(self) -> MemberRole: ...
    @property
    def USER(self) -> MemberRole: ...
    @property
    def ROOT(self) -> MemberRole: ...
    @property
    def DEFAULT(self) -> MemberRole: ...
    @property
    def INVALID(self) -> MemberRole: ...
    pass